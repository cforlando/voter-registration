#!/usr/bin/env pypy
# vi: set filetype=python :
#GPL2, Copyright 2015 Chad MILLER  http://chad.org/

"""
Make a Trie out of the records PII, mapping name and address to voterid.
"""


import sys
import json
import re
import os
from florida_dept_of_elections import registration, registration_field_names


def entrie(container, key, value):
    key = re.sub(r"\W", "", key.lower()).replace("_", "")
    if key:
        return _entrie(container, key, value)

def _entrie(container, key, value):
    """Make a trie, in which each character in key leads to a dict of remaining
    letters of key, and at the end, the empty-string key leads to a set of
    values that sit at that location"""

    if len(key) == 0:
        if "" in container:
            if value not in container[""]:
                container[""].append(value)
        else:
            container[""] = [ value ]

    else:
        fragment = key[0]
        if fragment not in container:
            container[fragment] = {}

        _entrie(container[fragment], key[1:], value)


def process():
    birthday_grouped_trie_to_voter_id = {}

    for line in sys.stdin:

        fields = [s.strip() for s in line.split("\t")]
        try:
            r = registration(* fields)
        except TypeError:
            print("field mismatch!")
            for k, v in zip(registration_field_names, fields):
                print("\t{0} = {1!r}".format(k, v))
            # raise
            continue

        if r.withheld.lower() != 'n':
                continue

        birthday = ".".join(r.birthdate.split("/"))
        voter_id = int(r.voterid)
        
        try:
            d = birthday_grouped_trie_to_voter_id[birthday]
        except KeyError:
            d = {}
            birthday_grouped_trie_to_voter_id[birthday] = d

        entrie(d, r.namefirst, voter_id)
        entrie(d, r.namemiddle, voter_id)
        entrie(d, r.namelast, voter_id)
        for word in r.residenceline1.split():
            entrie(d, word, voter_id)
        for word in r.residenceline2.split():
            entrie(d, word, voter_id)
        entrie(d, r.mailingline1, voter_id)
        entrie(d, r.phonenumber, voter_id)


    # Assume we are called one birthday at a time, and we only receive one birthday in
    # stdin.
    assert len(birthday_grouped_trie_to_voter_id.keys()) == 1, birthday_grouped_trie_to_voter_id.keys()

    for birthday in birthday_grouped_trie_to_voter_id:
        year = birthday[-4:]
        try:
            os.makedirs(os.path.join(sys.argv[1], year))
        except OSError:
            pass
        with open(os.path.join(sys.argv[1], year, "trie-to-voterid-for-birthday-{0}.json".format(birthday)), "w") as f:
            json.dump(birthday_grouped_trie_to_voter_id[birthday], f, separators=(',', ':'))



if __name__ == "__main__":
    process()
